App04.py
ㄴ class TreeTableApp
  ㄴ def init_ui
    - 윈도우 타이틀을 "예술작품 상태조사 지원 도구"로 지정, 크기 조정
  ㄴ def init_ds
    - 새 항목을 클리할 때 기존 데이터를 저장하거나 로드할 때 쓸 변수
  ㄴ def init_left
    - 버튼 생성 및 슬롯 연결
    - Create, Delete, Save, Load 4개의 QPushButton, 각 버튼 클릭 시 각 슬롯 호출
    - 트리뷰와 모델
    - QTreeView + QStandardItemModel: 헤더 라벨을 "Tree View"로 지정
    - 레이아웃 구성
    - QVBoxLayout에 버튼들을 트리뷰 순으로 추가
  ㄴ def init_right
    - StackWidget 생성-index0: 빈 QWidget, index1~3: 각각 Widget1~3, index4: ImageViewerApp
    - 처음에는 index 0
    - 수직 박스 layout에 stack widget 추가, layout return
  ㄴ def create_item
    - 현재 선택된 트리 노드의 index 목록 가져옴
    - 선택된 노드가 있으면 첫번째 선택 index를 idx에, 그 QStandardItem을 parent에 저장
    - get_item_level로 노드의 레벨(1: Project, 2: Artist, 3: Artwork 계산), 그 이후로는 자식 생성 불가 메시지
    - 새 노드 빈 정보를 INFO_ROLE에 저장, 부모에 appendRow로 추가, tree_view.expand(idx)로 확장하여 표시
  ㄴ def delete_item
    - selected로 삭제할 노드를 확인하고, 있으면 트리 모델에서 삭제
  ㄴ def save_data
    - serialize함수-name: 노드 text, data: INFO_ROLE에 저장된 dict, children: 자식 노드 배열 재귀 호출하여 리스트 반환
  ㄴ def load_data
    - 파일 열어서 JSON parsing, 트리 모델 초기화
    - JSON의 name과 data읽고 lvl이 1이면 data 내 "전시회명"을 표시 이름으로 대체 가능
    - 부모에 appendRow, 자식들에 build(item, child, lvl+1)
    - 최상위 노드부터 트리 재구성
  ㄴ def debug1
    - 현재 활성화된 하위 위젯이 get_data 갖고 있으면 콘솔에 출력
  ㄴ def debug2
    - example 1~3 준비, 활성 위젯이 set_data 지원할 경우 각 Widget에 매칭되는 example 넘겨서 폼에 채움
  ㄴ def debug3
    - 스택 위젯의 현재 페이지 강제 전환
  ㄴ def debug4
    - Widget3의 서브탭(widget31,32,33) 활성화 감지, 해당 서브탭의 get_data 호출해 콘솔에 출력
  ㄴ def on_tree_item_selected
    - 이전 선택 아이템 저장
    - 마지막에 선택했던 노드의 폼 데이터를 INFO_ROLE에 저장
    - 신규 선택 처리
    - 새로 클릭된 노드 기억, 노드 level과 저장된 데이터 가져옴
    - Project(lvl1): Widget1, Artist(lvl2): Widget2, Artwork(lvl3): Widget3, 그 외는 빈 화면
  ㄴ def keyPressEvent
    - ESC 누르면 트리뷰 선택 해제, 이벤트 소비
  ㄴ def get_item_level
    - QModelIndex로 깊이 계산하여 반환
