import sys
import os
from PySide6.QtCore import Qt, Signal, QTimer, QRect, QPoint
from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QFileDialog, QScrollArea, QMessageBox, QLabel, QGridLayout, QFrame, QSizePolicy
)
from PySide6.QtGui import QPixmap, QPainter, QPen


class ConditionMapViewer(QWidget):

    def get_autosave_path(self):
        #condition_map_path에서 파일명만 떼어내어 확장자 제거
        base = os.path.basename(self.condition_map_path)
        name, _ = os.path.splitext(base)
        return f"{name}_autosave_matches.json"

    def __init__(self, condition_map_path, zoom_in_paths):
        #기본 위젯 설정, 변수 설정   
        #매칭 정보: matches, match_history, redo_stack
        #마우스 드래그용 변수: selected_zoom_index, temp_rect_start, temp_rect_end
        #상태 플래그: mouse_clicked, matching_mode
        # Initialization 
        super().__init__() # call __init__() of parent class: QWidget 
    
        # Set Widget states 
        self.setFocusPolicy(Qt.StrongFocus) # Keyboard focus: receive Tab & mouse click
        self.setWindowTitle("Condition Map Viewer")
        self.setGeometry(150, 150, 1200, 900)

        # Initializat member variables 
        self.condition_map_path = condition_map_path
        self.zoom_in_paths = zoom_in_paths
        self.matches = {}
        self.match_history = []
        self.redo_stack = []

        # Member variables related to matching procedure. 
        self.selected_zoom_index = None
        self.temp_rect_start = None
        self.temp_rect_end = None
        
        # --- Layout Setup ---
        main_layout = QHBoxLayout(self)

        # Left Side: Vertical buttons
        #세로로 버튼 나열
        #버튼 10개(Match~Reset Help Flag)
        left_layout = QVBoxLayout()
        self.match_button = QPushButton("Match")
        self.matchStart_button = QPushButton("Match Start")
        self.matchDone_button = QPushButton("Match Done")
        self.export_button = QPushButton("Export Matches")
        self.import_button = QPushButton("Import Matches")
        self.clear_button = QPushButton("Clear All Matches")
        self.undo_button = QPushButton("Undo Last Match")
        self.redo_button = QPushButton("Redo")
        self.help_button = QPushButton("Help")
        self.reset_help_button = QPushButton("Reset Help Flag")
        #버튼 클릭 시 연결되는 슬롯
        for btn in [self.match_button, self.matchDone_button, self.matchStart_button, 
                    self.export_button, self.import_button, self.clear_button, 
                    self.undo_button, self.redo_button, self.help_button, 
                    self.reset_help_button]:
            left_layout.addWidget(btn)
        left_layout.addStretch()

        # Connect buttons
        self.match_button.clicked.connect(self.match_selection)
        self.matchStart_button.clicked.connect(self.match_start)
        self.matchDone_button.clicked.connect(self.match_done)

        self.export_button.clicked.connect(self.export_matches)
        self.import_button.clicked.connect(self.import_matches)
        self.clear_button.clicked.connect(self.clear_matches)
        self.undo_button.clicked.connect(self.undo_last_match)
        self.redo_button.clicked.connect(self.redo_match)
        self.help_button.clicked.connect(self.show_help)
        self.reset_help_button.clicked.connect(self.reset_help_flag)

        # Right Side: Map on top, thumbnails on bottom
        #QLabel에 원본 이미지를 QPixmap으로 로드, 500px로 스케일

        right_layout = QVBoxLayout()

        # Condition map display
        #Mouse Event(Press, Move, DoubleClick), Paint Event 연결
        self.map_label = QLabel()
        self.map_pixmap = QPixmap(self.condition_map_path)
        scaled_map = self.map_pixmap.scaledToHeight(500, Qt.SmoothTransformation)
        self.map_label.setPixmap(scaled_map)
        self.map_label.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        
        # This block of code overrides default mouse and paint behavior for self.map_label, 
        # which is the QLabel displaying the condition map image.
        self.map_label.mousePressEvent = self.start_rect
        # self.map_label.mouseReleaseEvent = self.end_rect

        self.map_label.setMouseTracking(True)
        self.map_label.mouseMoveEvent = self.track_rect

        # Status traced: Initially set to False. Once clicked, has the value True
        self.mouse_clicked = False
        self.matching_mode = False

        self.map_label.mouseDoubleClickEvent = self.click_region
        self.map_label.paintEvent = self.paint_overlay
        
        right_layout.addWidget(self.map_label)

        # Scroll area with zoom-in thumbnails
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.zoom_widget = QWidget()
        self.zoom_layout = QHBoxLayout()
        self.zoom_layout.setSpacing(5)
        self.zoom_widget.setLayout(self.zoom_layout)
        self.scroll_area.setWidget(self.zoom_widget)
        right_layout.addWidget(self.scroll_area)

        # Build zoom thumbnails
        #확대 썸네일 스크롤 영역
        self.zoom_labels = []
        for i, path in enumerate(self.zoom_in_paths):
            container = QVBoxLayout()
            wrapper = QWidget()
            label = QLabel()
            thumb = QPixmap(path).scaled(120, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            label.setPixmap(thumb)
            label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
            label.setFrameStyle(QFrame.Panel | QFrame.Raised)
            '''
            Draws a 3D-style panel border around the thumbnail label, making it look 
            raised and clickable.
            '''
            
            label.setLineWidth(2)
            '''
             Makes the border (defined via setFrameStyle) visibly 2 pixels thick, 
             giving the thumbnail a more defined, clickable appearance.
            '''

            label.mousePressEvent = lambda event, idx=i: self.select_zoom(idx)
            name_label = QLabel(os.path.basename(path))
            name_label.setAlignment(Qt.AlignCenter)
            name_label.setFixedWidth(120)
            
            container.addWidget(label)
            container.addWidget(name_label)
            
            wrapper.setLayout(container)
            self.zoom_layout.addWidget(wrapper)
            self.zoom_labels.append(label)

        # Combine layouts
        main_layout.addLayout(left_layout)
        main_layout.addLayout(right_layout)
     
    def set_data(self, data): 
    #data를 콘솔에 출력
        print(data)
        pass

    def open_images(self):
        #getOpenFileNames-한번에 여러 이미지 고를 수 있는 표준 파일 선택 창
        """Opens a file dialog to select one or more image files."""
        file_names, _ = QFileDialog.getOpenFileNames(
            self,
            "Select Images",
            "",
            "Images (*.png *.jpg *.jpeg *.bmp *.gif)"
        )
        #사용자가 파일 선택하면 file_names에 경로 리스트 담김
        if file_names:
            self.image_files = file_names
            self.load_images(file_names)
    
    def load_images(self, file_names):
        
        """Clears current images and loads the selected images into the grid."""
        
        # 1. Clear the grid layout.
        #기존 이미지 위젯 제거
        for i in reversed(range(self.image_layout.count())):
            widget = self.image_layout.itemAt(i).widget()        
            if widget:
                widget.setParent(None)
        self.image_labels.clear()
        self.selected_index = None

        #그리드에 새 이미지 추가
        columns = 3  # Number of columns in the grid.
        row, col = 0, 0
        
        for file in file_names:
            if os.path.exists(file):
                label = ClickableLabel()
                pixmap = QPixmap(file)
                if not pixmap.isNull():
                    scaled_pixmap = pixmap.scaled(
                        self.image_scale, self.image_scale,
                        Qt.KeepAspectRatio, Qt.SmoothTransformation
                    )
                    label.setPixmap(scaled_pixmap)
                    label.setAlignment(Qt.AlignCenter)
                    #클릭 시 해당 라벨을 select_image()에 전달
                    label.clicked.connect(lambda l=label: self.select_image(1))
                    self.image_labels.append(label)
                    self.image_layout.addWidget(label, row, col)
                    #다음 셀로 이동
                    col += 1
                    if col >= columns:
                        col = 0
                        row += 1
        #컨테이너 크기 재조정
        self.image_widget.adjustSize()

    def set_as_condition_map(self):
        #select_indices 확인, image_categories에 condition_map으로 마킹, 썸네일 스타일 새로 적용
        if not self.selected_indices:
            QMessageBox.information(self, "Info", "No image selected.")
            return
        for i in self.selected_indices:
            self.image_categories[i] = "condition_map"
        self.update_selection_style()

    def set_as_zoom_in(self):
        #set_as_condition_map과 거의 동일, 이미지 zoom_in으로 지정, 스타일 update
        if not self.selected_indices:
            QMessageBox.information(self, "Info", "No image selected.")
            return
        for i in self.selected_indices:
            self.image_categories[i] = "zoom_in"
        self.update_selection_style()

    def re_layout_images(self):
        #스크롤 위치 유지, layout 클리어, 재배치, 스타일 update, scroll 원래대로
        # Save current scroll positions.
        v_scroll = self.scroll_area.verticalScrollBar().value()
        h_scroll = self.scroll_area.horizontalScrollBar().value()

        # Clear the grid layout.
        for i in reversed(range(self.image_layout.count())):
            widget = self.image_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
        columns = 3
        row, col = 0, 0
        for label in self.image_labels:
            self.image_layout.addWidget(label, row, col)
            col += 1
            if col >= columns:
                col = 0
                row += 1
        self.image_widget.adjustSize()
        self.update_selection_style()
        
        # Restore the scroll positions after the event loop processes pending events.
        QTimer.singleShot(0, lambda: (
            self.scroll_area.verticalScrollBar().setValue(v_scroll),
            self.scroll_area.horizontalScrollBar().setValue(h_scroll)
        ))

    def select_image(self, label):
        #클릭된 label이 self.image_labels 중 몇번째인지 찾아 index에 저장
        """Handle Ctrl/Shift click to select images flexibly."""
        try:
            index = self.image_labels.index(label)
        except ValueError:
            return
        #key modifier 검사
        modifiers = QApplication.keyboardModifiers()

        #shift-last_selected_index부터 현재 index까지 범위 선택
        #ctrl-해당 index가 이미 선택됐으면 선택 해제, 아니면 추가 선택
        #일반 클릭-단일 선택, 기준점 update
        if modifiers == Qt.ShiftModifier and self.last_selected_index is not None:
            # Shift-click: select range
            start = min(self.last_selected_index, index)
            end = max(self.last_selected_index, index)
            self.selected_indices = list(range(start, end + 1))

        elif modifiers == Qt.ControlModifier:
            # Ctrl-click: toggle selection
            if index in self.selected_indices:
                self.selected_indices.remove(index)
            else:
                self.selected_indices.append(index)
            # Preserve last anchor point for shift range
            self.last_selected_index = index if self.last_selected_index is None else self.last_selected_index

        else:
            # Regular click: select one
            self.selected_indices = [index]
            self.last_selected_index = index

        self.update_selection_style()
        
    def update_selection_style(self):
    #image_labels 순회, 각 index와 label 가져옴
        for i, label in enumerate(self.image_labels):
            style = ""
            #i가 image_categories 키에 있으면 condition_map일때랑 zoom_in일때 다르게 설정
            if i in self.selected_indices:
                style += "border: 2px solid red;"
            if i in self.image_categories:
                category = self.image_categories[i]
                if category == "condition_map":
                    style += "background-color: rgba(0, 128, 255, 40);"
                    label.setToolTip("Condition Map")
                elif category == "zoom_in":
                    style += "background-color: rgba(255, 165, 0, 40);"
                    label.setToolTip("Zoom-in Cut")
            else:
                label.setToolTip("")
            label.setStyleSheet(style)

    def move_left(self):
    #한칸씩 왼쪽으로 이동시킴
    #index 0(맨 왼쪽) 제외, 오름차순 정렬로 순회(겹치지 않도록), 리스트 교환(image_labels[index]와 [index-1])
    #모든 index을 1만큼 감소시킴, last_selected_index 마지막으로 설정, layout update
    """Move multiple selected images one position to the left."""
        if not self.selected_indices:
            QMessageBox.information(self, "Info", "No images selected to move.")
            return

        if 0 in self.selected_indices:
            return  # At least one image is already at the leftmost position

        # Move from left to right (sorted ascending) to avoid overlap
        for index in sorted(self.selected_indices):
            self.image_labels[index], self.image_labels[index - 1] = (
                self.image_labels[index - 1], self.image_labels[index]
            )
            self.image_files[index], self.image_files[index - 1] = (
                self.image_files[index - 1], self.image_files[index]
            )

        # Update selected_indices
        self.selected_indices = [i - 1 for i in self.selected_indices]
        self.last_selected_index = self.selected_indices[-1]
        self.re_layout_images()

    def move_right(self):
        #한 칸씩 오른쪽으로 이동, 마지막 index 제외, 내림차순 정렬로 순회(겹침 방지)
        #[index+1]과 [index]교환, 모든 index+1, last_selected_indices update, layout update
        """Move multiple selected images one position to the right."""
        if not self.selected_indices:
            QMessageBox.information(self, "Info", "No images selected to move.")
            return

        if max(self.selected_indices) >= len(self.image_labels) - 1:
            return  # At least one image is already at the rightmost position

        # Move from right to left (sorted descending) to avoid overlap
        for index in sorted(self.selected_indices, reverse=True):
            self.image_labels[index], self.image_labels[index + 1] = (
                self.image_labels[index + 1], self.image_labels[index]
            )
            self.image_files[index], self.image_files[index + 1] = (
                self.image_files[index + 1], self.image_files[index]
            )

        # Update selected_indices
        self.selected_indices = [i + 1 for i in self.selected_indices]
        self.last_selected_index = self.selected_indices[-1]
        self.re_layout_images()

    def delete_image(self):
    #선택한 모든 이미지를 목록에서 제거
        """Delete all selected images."""
        if not self.selected_indices:
            QMessageBox.information(self, "Info", "No images are selected for deletion.")
            return

        for index in sorted(self.selected_indices, reverse=True):
            if index < len(self.image_labels):
                del self.image_labels[index]
            if index < len(self.image_files):
                del self.image_files[index]

        self.selected_indices = []
        self.last_selected_index = None
        self.re_layout_images()
        
    def view_condition_map(self):
        #condition_map/zoom_in에 맞게 파일 분리, condition_map check, viewer 생성 및 표시
        condition_maps = [self.image_files[i] for i, cat in self.image_categories.items() if cat == "condition_map"]
        zoom_ins = [self.image_files[i] for i, cat in self.image_categories.items() if cat == "zoom_in"]
        if not condition_maps:
            QMessageBox.information(self, "Info", "Please assign at least one image as 'Condition Map'.")
            return
        self.map_viewer = ConditionMapViewer(condition_maps[0], zoom_ins)
        self.map_viewer.show()

